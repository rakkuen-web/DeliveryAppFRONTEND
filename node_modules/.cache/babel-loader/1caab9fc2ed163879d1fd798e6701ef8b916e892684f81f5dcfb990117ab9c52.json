{"ast":null,"code":"// Generate device fingerprint to prevent multiple driver accounts\nexport const generateDeviceFingerprint = () => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  ctx.textBaseline = 'top';\n  ctx.font = '14px Arial';\n  ctx.fillText('Device fingerprint', 2, 2);\n  const fingerprint = [navigator.userAgent, navigator.language, screen.width + 'x' + screen.height, new Date().getTimezoneOffset(), navigator.hardwareConcurrency || 'unknown', canvas.toDataURL()].join('|');\n\n  // Simple hash function\n  let hash = 0;\n  for (let i = 0; i < fingerprint.length; i++) {\n    const char = fingerprint.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString(36);\n};","map":{"version":3,"names":["generateDeviceFingerprint","canvas","document","createElement","ctx","getContext","textBaseline","font","fillText","fingerprint","navigator","userAgent","language","screen","width","height","Date","getTimezoneOffset","hardwareConcurrency","toDataURL","join","hash","i","length","char","charCodeAt","Math","abs","toString"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/deviceFingerprint.js"],"sourcesContent":["// Generate device fingerprint to prevent multiple driver accounts\nexport const generateDeviceFingerprint = () => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  ctx.textBaseline = 'top';\n  ctx.font = '14px Arial';\n  ctx.fillText('Device fingerprint', 2, 2);\n  \n  const fingerprint = [\n    navigator.userAgent,\n    navigator.language,\n    screen.width + 'x' + screen.height,\n    new Date().getTimezoneOffset(),\n    navigator.hardwareConcurrency || 'unknown',\n    canvas.toDataURL()\n  ].join('|');\n  \n  // Simple hash function\n  let hash = 0;\n  for (let i = 0; i < fingerprint.length; i++) {\n    const char = fingerprint.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return Math.abs(hash).toString(36);\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,yBAAyB,GAAGA,CAAA,KAAM;EAC7C,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EACnCD,GAAG,CAACE,YAAY,GAAG,KAAK;EACxBF,GAAG,CAACG,IAAI,GAAG,YAAY;EACvBH,GAAG,CAACI,QAAQ,CAAC,oBAAoB,EAAE,CAAC,EAAE,CAAC,CAAC;EAExC,MAAMC,WAAW,GAAG,CAClBC,SAAS,CAACC,SAAS,EACnBD,SAAS,CAACE,QAAQ,EAClBC,MAAM,CAACC,KAAK,GAAG,GAAG,GAAGD,MAAM,CAACE,MAAM,EAClC,IAAIC,IAAI,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC,EAC9BP,SAAS,CAACQ,mBAAmB,IAAI,SAAS,EAC1CjB,MAAM,CAACkB,SAAS,CAAC,CAAC,CACnB,CAACC,IAAI,CAAC,GAAG,CAAC;;EAEX;EACA,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,WAAW,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,MAAME,IAAI,GAAGf,WAAW,CAACgB,UAAU,CAACH,CAAC,CAAC;IACtCD,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAIG,IAAI;IAClCH,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC;EACtB;EAEA,OAAOK,IAAI,CAACC,GAAG,CAACN,IAAI,CAAC,CAACO,QAAQ,CAAC,EAAE,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}