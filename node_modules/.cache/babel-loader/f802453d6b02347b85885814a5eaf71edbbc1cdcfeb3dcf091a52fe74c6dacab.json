{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.1.227:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  startTracking() {\n    this.isTracking = true;\n\n    // Get live GPS location immediately\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const liveLocation = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        console.log('📍 Got live GPS location:', liveLocation);\n        this.updateLocation(liveLocation.latitude, liveLocation.longitude);\n\n        // Start live tracking\n        this.watchId = navigator.geolocation.watchPosition(pos => {\n          console.log('📍 Live GPS update:', pos.coords.latitude, pos.coords.longitude);\n          this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n        }, error => console.error('GPS error:', error), {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0\n        });\n      }, error => {\n        console.log('GPS failed, using mock location near Casablanca');\n        const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n        const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n        this.updateLocation(mockLat, mockLng);\n\n        // Simulate movement\n        this.watchId = setInterval(() => {\n          const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n          const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n          this.updateLocation(newLat, newLng);\n        }, 5000);\n      });\n    }\n  }\n  stopTracking() {\n    if (this.watchId) {\n      if (navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        };\n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    // Get driver's stored location from database\n    try {\n      var _userData$location, _userData$location2;\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const userData = await response.json();\n      if ((_userData$location = userData.location) !== null && _userData$location !== void 0 && _userData$location.latitude && (_userData$location2 = userData.location) !== null && _userData$location2 !== void 0 && _userData$location2.longitude) {\n        console.log('Using driver stored location:', userData.location);\n        return {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n      }\n    } catch (error) {\n      console.error('Error getting stored location:', error);\n    }\n\n    // Fallback to Casablanca\n    console.log('Using default Casablanca location');\n    return {\n      latitude: 33.5731,\n      longitude: -7.5898\n    };\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","navigator","geolocation","getCurrentPosition","position","liveLocation","latitude","coords","longitude","console","log","updateLocation","watchPosition","pos","error","enableHighAccuracy","timeout","maximumAge","mockLat","Math","random","mockLng","setInterval","newLat","newLng","stopTracking","clearWatch","clearInterval","token","localStorage","getItem","patch","address","toFixed","headers","Authorization","window","driverSocket","locationData","driverId","location","timestamp","Date","now","emit","getCurrentLocation","_userData$location","_userData$location2","response","fetch","userData","json"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://192.168.1.227:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  startTracking() {\n    this.isTracking = true;\n    \n    // Get live GPS location immediately\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const liveLocation = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          };\n          console.log('📍 Got live GPS location:', liveLocation);\n          this.updateLocation(liveLocation.latitude, liveLocation.longitude);\n          \n          // Start live tracking\n          this.watchId = navigator.geolocation.watchPosition(\n            (pos) => {\n              console.log('📍 Live GPS update:', pos.coords.latitude, pos.coords.longitude);\n              this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n            },\n            (error) => console.error('GPS error:', error),\n            { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\n          );\n        },\n        (error) => {\n          console.log('GPS failed, using mock location near Casablanca');\n          const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n          const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n          this.updateLocation(mockLat, mockLng);\n          \n          // Simulate movement\n          this.watchId = setInterval(() => {\n            const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n            const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n            this.updateLocation(newLat, newLng);\n          }, 5000);\n        }\n      );\n    }\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      if (navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        };\n        \n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    // Get driver's stored location from database\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      const userData = await response.json();\n      \n      if (userData.location?.latitude && userData.location?.longitude) {\n        console.log('Using driver stored location:', userData.location);\n        return {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n      }\n    } catch (error) {\n      console.error('Error getting stored location:', error);\n    }\n    \n    // Fallback to Casablanca\n    console.log('Using default Casablanca location');\n    return {\n      latitude: 33.5731,\n      longitude: -7.5898\n    };\n  }\n}\n\nexport default LocationTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}