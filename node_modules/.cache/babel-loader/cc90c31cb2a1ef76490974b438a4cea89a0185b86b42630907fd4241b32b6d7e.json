{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.1.227:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  async startTracking() {\n    this.isTracking = true;\n\n    // Get driver's actual location from database first\n    try {\n      var _userData$location, _userData$location2;\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const userData = await response.json();\n      let baseLocation;\n      if ((_userData$location = userData.location) !== null && _userData$location !== void 0 && _userData$location.latitude && (_userData$location2 = userData.location) !== null && _userData$location2 !== void 0 && _userData$location2.longitude) {\n        // Use driver's stored location\n        baseLocation = {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n        console.log('Using driver stored location:', baseLocation);\n      } else {\n        // Fallback to Casablanca\n        baseLocation = {\n          latitude: 33.5731,\n          longitude: -7.5898\n        };\n        console.log('Using default Casablanca location');\n      }\n\n      // Update location immediately\n      this.updateLocation(baseLocation.latitude, baseLocation.longitude);\n\n      // Simulate small movements every 10 seconds\n      this.watchId = setInterval(() => {\n        const newLat = baseLocation.latitude + (Math.random() - 0.5) * 0.001;\n        const newLng = baseLocation.longitude + (Math.random() - 0.5) * 0.001;\n        this.updateLocation(newLat, newLng);\n      }, 10000);\n    } catch (error) {\n      console.error('Error getting driver location:', error);\n    }\n  }\n  stopTracking() {\n    if (this.watchId) {\n      clearInterval(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('Mock location tracking stopped');\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        };\n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    // Get driver's stored location from database\n    try {\n      var _userData$location3, _userData$location4;\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const userData = await response.json();\n      if ((_userData$location3 = userData.location) !== null && _userData$location3 !== void 0 && _userData$location3.latitude && (_userData$location4 = userData.location) !== null && _userData$location4 !== void 0 && _userData$location4.longitude) {\n        console.log('Using driver stored location:', userData.location);\n        return {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n      }\n    } catch (error) {\n      console.error('Error getting stored location:', error);\n    }\n\n    // Fallback to Casablanca\n    console.log('Using default Casablanca location');\n    return {\n      latitude: 33.5731,\n      longitude: -7.5898\n    };\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","_userData$location","_userData$location2","token","localStorage","getItem","response","fetch","headers","Authorization","userData","json","baseLocation","location","latitude","longitude","console","log","updateLocation","setInterval","newLat","Math","random","newLng","error","stopTracking","clearInterval","patch","address","toFixed","window","driverSocket","locationData","driverId","timestamp","Date","now","emit","getCurrentLocation","_userData$location3","_userData$location4"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://192.168.1.227:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  async startTracking() {\n    this.isTracking = true;\n    \n    // Get driver's actual location from database first\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      const userData = await response.json();\n      \n      let baseLocation;\n      if (userData.location?.latitude && userData.location?.longitude) {\n        // Use driver's stored location\n        baseLocation = {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n        console.log('Using driver stored location:', baseLocation);\n      } else {\n        // Fallback to Casablanca\n        baseLocation = {\n          latitude: 33.5731,\n          longitude: -7.5898\n        };\n        console.log('Using default Casablanca location');\n      }\n      \n      // Update location immediately\n      this.updateLocation(baseLocation.latitude, baseLocation.longitude);\n      \n      // Simulate small movements every 10 seconds\n      this.watchId = setInterval(() => {\n        const newLat = baseLocation.latitude + (Math.random() - 0.5) * 0.001;\n        const newLng = baseLocation.longitude + (Math.random() - 0.5) * 0.001;\n        this.updateLocation(newLat, newLng);\n      }, 10000);\n      \n    } catch (error) {\n      console.error('Error getting driver location:', error);\n    }\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      clearInterval(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('Mock location tracking stopped');\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        };\n        \n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    // Get driver's stored location from database\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/users/${this.userId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      const userData = await response.json();\n      \n      if (userData.location?.latitude && userData.location?.longitude) {\n        console.log('Using driver stored location:', userData.location);\n        return {\n          latitude: userData.location.latitude,\n          longitude: userData.location.longitude\n        };\n      }\n    } catch (error) {\n      console.error('Error getting stored location:', error);\n    }\n    \n    // Fallback to Casablanca\n    console.log('Using default Casablanca location');\n    return {\n      latitude: 33.5731,\n      longitude: -7.5898\n    };\n  }\n}\n\nexport default LocationTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}