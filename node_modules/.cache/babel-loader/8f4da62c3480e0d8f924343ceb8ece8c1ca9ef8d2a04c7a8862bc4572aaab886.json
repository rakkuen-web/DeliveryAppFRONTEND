{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.1.227:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  startTracking() {\n    var _s = $RefreshSig$();\n    this.isTracking = true;\n    if (!navigator.geolocation) {\n      this.useFallbackLocation();\n      return;\n    }\n    _s(navigator.geolocation.getCurrentPosition(position => {\n      console.log('📍 Got GPS location:', position.coords.latitude, position.coords.longitude);\n      this.updateLocation(position.coords.latitude, position.coords.longitude);\n\n      // Start continuous tracking\n      this.watchId = navigator.geolocation.watchPosition(pos => {\n        console.log('📍 GPS update:', pos.coords.latitude, pos.coords.longitude);\n        this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n      }, error => console.error('GPS error:', error), {\n        enableHighAccuracy: true,\n        timeout: 15000,\n        maximumAge: 10000\n      });\n    }, _s(error => {\n      _s();\n      console.error('GPS failed:', error);\n      this.useFallbackLocation();\n    }, \"VAyt5iGof8NpHuXPem2fSqmqJkY=\", true), {\n      enableHighAccuracy: true,\n      timeout: 15000,\n      maximumAge: 60000\n    }), \"VAyt5iGof8NpHuXPem2fSqmqJkY=\", true);\n  }\n  useFallbackLocation() {\n    // Default to Casablanca\n    const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n    const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n    console.log('Using default location (Casablanca)');\n    this.updateLocation(mockLat, mockLng);\n\n    // Simulate movement\n    this.watchId = setInterval(() => {\n      const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 5000);\n  }\n  stopTracking() {\n    if (this.watchId) {\n      if (typeof this.watchId === 'number' && navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        };\n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    return new Promise(resolve => {\n      if (!navigator.geolocation) {\n        resolve({\n          latitude: 33.5731,\n          longitude: -7.5898\n        });\n        return;\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, () => {\n        resolve({\n          latitude: 33.5731,\n          longitude: -7.5898\n        });\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 30000\n      });\n    });\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","_s","$RefreshSig$","navigator","geolocation","useFallbackLocation","getCurrentPosition","position","console","log","coords","latitude","longitude","updateLocation","watchPosition","pos","error","enableHighAccuracy","timeout","maximumAge","mockLat","Math","random","mockLng","setInterval","newLat","newLng","stopTracking","clearWatch","clearInterval","token","localStorage","getItem","patch","address","toFixed","headers","Authorization","window","driverSocket","locationData","driverId","location","timestamp","Date","now","emit","getCurrentLocation","Promise","resolve"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://192.168.1.227:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  startTracking() {\n    this.isTracking = true;\n    \n    if (!navigator.geolocation) {\n      this.useFallbackLocation();\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log('📍 Got GPS location:', position.coords.latitude, position.coords.longitude);\n        this.updateLocation(position.coords.latitude, position.coords.longitude);\n        \n        // Start continuous tracking\n        this.watchId = navigator.geolocation.watchPosition(\n          (pos) => {\n            console.log('📍 GPS update:', pos.coords.latitude, pos.coords.longitude);\n            this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n          },\n          (error) => console.error('GPS error:', error),\n          { enableHighAccuracy: true, timeout: 15000, maximumAge: 10000 }\n        );\n      },\n      (error) => {\n        console.error('GPS failed:', error);\n        this.useFallbackLocation();\n      },\n      { enableHighAccuracy: true, timeout: 15000, maximumAge: 60000 }\n    );\n  }\n\n\n\n  useFallbackLocation() {\n    // Default to Casablanca\n    const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n    const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n    console.log('Using default location (Casablanca)');\n    \n    this.updateLocation(mockLat, mockLng);\n    \n    // Simulate movement\n    this.watchId = setInterval(() => {\n      const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 5000);\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      if (typeof this.watchId === 'number' && navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        };\n        \n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    return new Promise((resolve) => {\n      if (!navigator.geolocation) {\n        resolve({ latitude: 33.5731, longitude: -7.5898 });\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        () => {\n          resolve({ latitude: 33.5731, longitude: -7.5898 });\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 30000 }\n      );\n    });\n  }\n\n\n}\n\nexport default LocationTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}