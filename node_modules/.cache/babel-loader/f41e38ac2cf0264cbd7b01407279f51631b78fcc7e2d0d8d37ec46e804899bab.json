{"ast":null,"code":"// City detection based on GPS coordinates\nexport const detectCity = (latitude, longitude) => {\n  const cities = {\n    marrakech: {\n      name: 'Marrakech',\n      center: [31.6295, -7.9811],\n      bounds: {\n        north: 31.7,\n        south: 31.55,\n        east: -7.9,\n        west: -8.1\n      }\n    },\n    casablanca: {\n      name: 'Casablanca',\n      center: [33.5731, -7.5898],\n      bounds: {\n        north: 33.65,\n        south: 33.5,\n        east: -7.5,\n        west: -7.7\n      }\n    },\n    rabat: {\n      name: 'Rabat',\n      center: [34.0209, -6.8416],\n      bounds: {\n        north: 34.1,\n        south: 33.95,\n        east: -6.7,\n        west: -6.9\n      }\n    }\n  };\n\n  // Check which city the coordinates fall into\n  for (const [key, city] of Object.entries(cities)) {\n    if (latitude >= city.bounds.south && latitude <= city.bounds.north && longitude >= city.bounds.west && longitude <= city.bounds.east) {\n      return {\n        key,\n        name: city.name,\n        center: city.center\n      };\n    }\n  }\n\n  // Default to Marrakech if no match\n  return {\n    key: 'marrakech',\n    name: 'Marrakech',\n    center: cities.marrakech.center\n  };\n};\n\n// Get user's city and store in localStorage\nexport const getUserCity = () => {\n  return new Promise(resolve => {\n    const savedCity = localStorage.getItem('userCity');\n    if (savedCity) {\n      resolve(JSON.parse(savedCity));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      const city = detectCity(position.coords.latitude, position.coords.longitude);\n      localStorage.setItem('userCity', JSON.stringify(city));\n      resolve(city);\n    }, () => {\n      // Default to Marrakech\n      const defaultCity = {\n        key: 'marrakech',\n        name: 'Marrakech',\n        center: [31.6295, -7.9811]\n      };\n      localStorage.setItem('userCity', JSON.stringify(defaultCity));\n      resolve(defaultCity);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 5000,\n      maximumAge: 600000\n    });\n  });\n};","map":{"version":3,"names":["detectCity","latitude","longitude","cities","marrakech","name","center","bounds","north","south","east","west","casablanca","rabat","key","city","Object","entries","getUserCity","Promise","resolve","savedCity","localStorage","getItem","JSON","parse","navigator","geolocation","getCurrentPosition","position","coords","setItem","stringify","defaultCity","enableHighAccuracy","timeout","maximumAge"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/cityDetector.js"],"sourcesContent":["// City detection based on GPS coordinates\nexport const detectCity = (latitude, longitude) => {\n  const cities = {\n    marrakech: {\n      name: 'Marrakech',\n      center: [31.6295, -7.9811],\n      bounds: {\n        north: 31.7,\n        south: 31.55,\n        east: -7.9,\n        west: -8.1\n      }\n    },\n    casablanca: {\n      name: 'Casablanca',\n      center: [33.5731, -7.5898],\n      bounds: {\n        north: 33.65,\n        south: 33.5,\n        east: -7.5,\n        west: -7.7\n      }\n    },\n    rabat: {\n      name: 'Rabat',\n      center: [34.0209, -6.8416],\n      bounds: {\n        north: 34.1,\n        south: 33.95,\n        east: -6.7,\n        west: -6.9\n      }\n    }\n  };\n\n  // Check which city the coordinates fall into\n  for (const [key, city] of Object.entries(cities)) {\n    if (\n      latitude >= city.bounds.south &&\n      latitude <= city.bounds.north &&\n      longitude >= city.bounds.west &&\n      longitude <= city.bounds.east\n    ) {\n      return {\n        key,\n        name: city.name,\n        center: city.center\n      };\n    }\n  }\n\n  // Default to Marrakech if no match\n  return {\n    key: 'marrakech',\n    name: 'Marrakech',\n    center: cities.marrakech.center\n  };\n};\n\n// Get user's city and store in localStorage\nexport const getUserCity = () => {\n  return new Promise((resolve) => {\n    const savedCity = localStorage.getItem('userCity');\n    if (savedCity) {\n      resolve(JSON.parse(savedCity));\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const city = detectCity(position.coords.latitude, position.coords.longitude);\n        localStorage.setItem('userCity', JSON.stringify(city));\n        resolve(city);\n      },\n      () => {\n        // Default to Marrakech\n        const defaultCity = {\n          key: 'marrakech',\n          name: 'Marrakech',\n          center: [31.6295, -7.9811]\n        };\n        localStorage.setItem('userCity', JSON.stringify(defaultCity));\n        resolve(defaultCity);\n      },\n      { enableHighAccuracy: false, timeout: 5000, maximumAge: 600000 }\n    );\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}