{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  startTracking() {\n    if (!navigator.geolocation) {\n      console.error('Geolocation not supported');\n      return;\n    }\n    this.isTracking = true;\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 30000\n    };\n    this.watchId = navigator.geolocation.watchPosition(position => {\n      this.updateLocation(position.coords.latitude, position.coords.longitude);\n    }, error => {\n      console.error('Location error:', error);\n    }, options);\n  }\n  stopTracking() {\n    if (this.watchId) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Broadcast location to customers via socket\n      if (window.driverSocket) {\n        window.driverSocket.emit('driver-location', {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    // Use mock location since geolocation requires HTTPS\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n    console.log('Using mock location for testing:', mockLocation);\n    return Promise.resolve(mockLocation);\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","navigator","geolocation","console","error","options","enableHighAccuracy","timeout","maximumAge","watchPosition","position","updateLocation","coords","latitude","longitude","stopTracking","clearWatch","token","localStorage","getItem","patch","address","toFixed","headers","Authorization","window","driverSocket","emit","driverId","location","timestamp","Date","now","getCurrentLocation","mockLocation","Math","random","log","Promise","resolve"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  startTracking() {\n    if (!navigator.geolocation) {\n      console.error('Geolocation not supported');\n      return;\n    }\n\n    this.isTracking = true;\n    \n    const options = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 30000\n    };\n\n    this.watchId = navigator.geolocation.watchPosition(\n      (position) => {\n        this.updateLocation(position.coords.latitude, position.coords.longitude);\n      },\n      (error) => {\n        console.error('Location error:', error);\n      },\n      options\n    );\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Broadcast location to customers via socket\n      if (window.driverSocket) {\n        window.driverSocket.emit('driver-location', {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    // Use mock location since geolocation requires HTTPS\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n    \n    console.log('Using mock location for testing:', mockLocation);\n    return Promise.resolve(mockLocation);\n  }\n}\n\nexport default LocationTracker;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,eAAe,CAAC;EAC3BC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EAEAC,aAAaA,CAAA,EAAG;IACd,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;MAC1BC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC1C;IACF;IAEA,IAAI,CAACL,UAAU,GAAG,IAAI;IAEtB,MAAMM,OAAO,GAAG;MACdC,kBAAkB,EAAE,IAAI;MACxBC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE;IACd,CAAC;IAED,IAAI,CAACV,OAAO,GAAGG,SAAS,CAACC,WAAW,CAACO,aAAa,CAC/CC,QAAQ,IAAK;MACZ,IAAI,CAACC,cAAc,CAACD,QAAQ,CAACE,MAAM,CAACC,QAAQ,EAAEH,QAAQ,CAACE,MAAM,CAACE,SAAS,CAAC;IAC1E,CAAC,EACAV,KAAK,IAAK;MACTD,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACzC,CAAC,EACDC,OACF,CAAC;EACH;EAEAU,YAAYA,CAAA,EAAG;IACb,IAAI,IAAI,CAACjB,OAAO,EAAE;MAChBG,SAAS,CAACC,WAAW,CAACc,UAAU,CAAC,IAAI,CAAClB,OAAO,CAAC;MAC9C,IAAI,CAACA,OAAO,GAAG,IAAI;IACrB;IACA,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EAEA,MAAMY,cAAcA,CAACE,QAAQ,EAAEC,SAAS,EAAE;IACxC,IAAI;MACF,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAM1B,KAAK,CAAC2B,KAAK,CAAC,GAAG1B,OAAO,UAAU,IAAI,CAACG,MAAM,WAAW,EAAE;QAC5DgB,QAAQ;QACRC,SAAS;QACTO,OAAO,EAAE,GAAGR,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,KAAKR,SAAS,CAACQ,OAAO,CAAC,CAAC,CAAC;MAC1D,CAAC,EAAE;QACDC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUP,KAAK;QAAG;MAC9C,CAAC,CAAC;;MAEF;MACA,IAAIQ,MAAM,CAACC,YAAY,EAAE;QACvBD,MAAM,CAACC,YAAY,CAACC,IAAI,CAAC,iBAAiB,EAAE;UAC1CC,QAAQ,EAAE,IAAI,CAAC/B,MAAM;UACrBgC,QAAQ,EAAE;YAAEhB,QAAQ;YAAEC;UAAU,CAAC;UACjCgB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;QACtB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF;EAEA,MAAM6B,kBAAkBA,CAAA,EAAG;IACzB;IACA,MAAMC,YAAY,GAAG;MACnBrB,QAAQ,EAAE,OAAO,GAAG,CAACsB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI;MAChDtB,SAAS,EAAE,CAAC,MAAM,GAAG,CAACqB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI;IAC/C,CAAC;IAEDjC,OAAO,CAACkC,GAAG,CAAC,kCAAkC,EAAEH,YAAY,CAAC;IAC7D,OAAOI,OAAO,CAACC,OAAO,CAACL,YAAY,CAAC;EACtC;AACF;AAEA,eAAevC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}