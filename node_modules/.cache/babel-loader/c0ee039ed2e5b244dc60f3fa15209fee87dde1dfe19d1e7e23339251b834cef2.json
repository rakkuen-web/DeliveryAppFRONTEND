{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.1.227:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  startTracking() {\n    this.isTracking = true;\n\n    // Force GPS to work - try multiple times\n    this.tryGetLocation(0);\n  }\n  tryGetLocation(attempt) {\n    if (attempt > 5) {\n      console.log('Using mock location after 5 attempts');\n      this.useFallbackLocation();\n      return;\n    }\n    if (!navigator.geolocation) {\n      this.useFallbackLocation();\n      return;\n    }\n    const options = {\n      enableHighAccuracy: attempt < 2,\n      // Try high accuracy first\n      timeout: attempt < 2 ? 5000 : 15000,\n      maximumAge: attempt < 2 ? 0 : 300000\n    };\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log('📍 GPS SUCCESS:', position.coords.latitude, position.coords.longitude);\n      this.updateLocation(position.coords.latitude, position.coords.longitude);\n\n      // Start watching with successful options\n      this.watchId = navigator.geolocation.watchPosition(pos => {\n        console.log('📍 Live update:', pos.coords.latitude, pos.coords.longitude);\n        this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n      }, () => {},\n      // Ignore watch errors\n      options);\n    }, error => {\n      console.log(`GPS attempt ${attempt + 1} failed:`, error.message);\n      setTimeout(() => this.tryGetLocation(attempt + 1), 1000);\n    }, options);\n  }\n  useFallbackLocation() {\n    // Default to Casablanca\n    const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n    const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n    console.log('Using default location (Casablanca)');\n    this.updateLocation(mockLat, mockLng);\n\n    // Simulate movement\n    this.watchId = setInterval(() => {\n      const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 5000);\n  }\n  stopTracking() {\n    if (this.watchId) {\n      if (typeof this.watchId === 'number' && navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        };\n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    return new Promise(resolve => {\n      if (!navigator.geolocation) {\n        resolve({\n          latitude: 33.5731,\n          longitude: -7.5898\n        });\n        return;\n      }\n\n      // Try high accuracy first\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, () => {\n        // Try low accuracy\n        navigator.geolocation.getCurrentPosition(position => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        }, () => resolve({\n          latitude: 33.5731,\n          longitude: -7.5898\n        }), {\n          enableHighAccuracy: false,\n          timeout: 15000,\n          maximumAge: 600000\n        });\n      }, {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    });\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","tryGetLocation","attempt","console","log","useFallbackLocation","navigator","geolocation","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","position","coords","latitude","longitude","updateLocation","watchPosition","pos","error","message","setTimeout","mockLat","Math","random","mockLng","setInterval","newLat","newLng","stopTracking","clearWatch","clearInterval","token","localStorage","getItem","patch","address","toFixed","headers","Authorization","window","driverSocket","locationData","driverId","location","timestamp","Date","now","emit","getCurrentLocation","Promise","resolve"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://192.168.1.227:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  startTracking() {\n    this.isTracking = true;\n    \n    // Force GPS to work - try multiple times\n    this.tryGetLocation(0);\n  }\n\n  tryGetLocation(attempt) {\n    if (attempt > 5) {\n      console.log('Using mock location after 5 attempts');\n      this.useFallbackLocation();\n      return;\n    }\n\n    if (!navigator.geolocation) {\n      this.useFallbackLocation();\n      return;\n    }\n\n    const options = {\n      enableHighAccuracy: attempt < 2, // Try high accuracy first\n      timeout: attempt < 2 ? 5000 : 15000,\n      maximumAge: attempt < 2 ? 0 : 300000\n    };\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log('📍 GPS SUCCESS:', position.coords.latitude, position.coords.longitude);\n        this.updateLocation(position.coords.latitude, position.coords.longitude);\n        \n        // Start watching with successful options\n        this.watchId = navigator.geolocation.watchPosition(\n          (pos) => {\n            console.log('📍 Live update:', pos.coords.latitude, pos.coords.longitude);\n            this.updateLocation(pos.coords.latitude, pos.coords.longitude);\n          },\n          () => {}, // Ignore watch errors\n          options\n        );\n      },\n      (error) => {\n        console.log(`GPS attempt ${attempt + 1} failed:`, error.message);\n        setTimeout(() => this.tryGetLocation(attempt + 1), 1000);\n      },\n      options\n    );\n  }\n\n\n\n  useFallbackLocation() {\n    // Default to Casablanca\n    const mockLat = 33.5731 + (Math.random() - 0.5) * 0.01;\n    const mockLng = -7.5898 + (Math.random() - 0.5) * 0.01;\n    console.log('Using default location (Casablanca)');\n    \n    this.updateLocation(mockLat, mockLng);\n    \n    // Simulate movement\n    this.watchId = setInterval(() => {\n      const newLat = mockLat + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLng + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 5000);\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      if (typeof this.watchId === 'number' && navigator.geolocation) {\n        navigator.geolocation.clearWatch(this.watchId);\n      } else {\n        clearInterval(this.watchId);\n      }\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('🚫 Live location tracking stopped');\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        };\n        \n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    return new Promise((resolve) => {\n      if (!navigator.geolocation) {\n        resolve({ latitude: 33.5731, longitude: -7.5898 });\n        return;\n      }\n\n      // Try high accuracy first\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        () => {\n          // Try low accuracy\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              resolve({\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n              });\n            },\n            () => resolve({ latitude: 33.5731, longitude: -7.5898 }),\n            { enableHighAccuracy: false, timeout: 15000, maximumAge: 600000 }\n          );\n        },\n        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\n      );\n    });\n  }\n\n\n}\n\nexport default LocationTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}