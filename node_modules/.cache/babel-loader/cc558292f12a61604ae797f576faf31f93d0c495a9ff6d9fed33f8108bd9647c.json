{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.1.227:5000/api';\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n  startTracking() {\n    this.isTracking = true;\n\n    // Use mock location tracking for testing\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n\n    // Update location immediately\n    this.updateLocation(mockLocation.latitude, mockLocation.longitude);\n\n    // Simulate movement every 10 seconds\n    this.watchId = setInterval(() => {\n      const newLat = mockLocation.latitude + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLocation.longitude + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 10000);\n    console.log('Mock location tracking started');\n  }\n  stopTracking() {\n    if (this.watchId) {\n      clearInterval(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('Mock location tracking stopped');\n  }\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: {\n            latitude,\n            longitude\n          },\n          timestamp: Date.now()\n        };\n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n  async getCurrentLocation() {\n    // Use mock location since geolocation requires HTTPS\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n    console.log('Using mock location for testing:', mockLocation);\n    return Promise.resolve(mockLocation);\n  }\n}\nexport default LocationTracker;","map":{"version":3,"names":["axios","API_URL","LocationTracker","constructor","userId","watchId","isTracking","startTracking","mockLocation","latitude","Math","random","longitude","updateLocation","setInterval","newLat","newLng","console","log","stopTracking","clearInterval","token","localStorage","getItem","patch","address","toFixed","headers","Authorization","window","driverSocket","locationData","driverId","location","timestamp","Date","now","emit","error","getCurrentLocation","Promise","resolve"],"sources":["C:/Users/LENOVO LEGION 7/delivery-connect/frontend/src/utils/locationTracker.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://192.168.1.227:5000/api';\n\nexport class LocationTracker {\n  constructor(userId) {\n    this.userId = userId;\n    this.watchId = null;\n    this.isTracking = false;\n  }\n\n  startTracking() {\n    this.isTracking = true;\n    \n    // Use mock location tracking for testing\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n    \n    // Update location immediately\n    this.updateLocation(mockLocation.latitude, mockLocation.longitude);\n    \n    // Simulate movement every 10 seconds\n    this.watchId = setInterval(() => {\n      const newLat = mockLocation.latitude + (Math.random() - 0.5) * 0.001;\n      const newLng = mockLocation.longitude + (Math.random() - 0.5) * 0.001;\n      this.updateLocation(newLat, newLng);\n    }, 10000);\n    \n    console.log('Mock location tracking started');\n  }\n\n  stopTracking() {\n    if (this.watchId) {\n      clearInterval(this.watchId);\n      this.watchId = null;\n    }\n    this.isTracking = false;\n    console.log('Mock location tracking stopped');\n  }\n\n  async updateLocation(latitude, longitude) {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.patch(`${API_URL}/users/${this.userId}/location`, {\n        latitude,\n        longitude,\n        address: `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Cache location and broadcast to customers via socket\n      if (window.driverSocket) {\n        const locationData = {\n          driverId: this.userId,\n          location: { latitude, longitude },\n          timestamp: Date.now()\n        };\n        \n        window.driverSocket.emit('driver-location', locationData);\n        window.driverSocket.emit('cache-driver-location', locationData);\n      }\n    } catch (error) {\n      console.error('Failed to update location:', error);\n    }\n  }\n\n  async getCurrentLocation() {\n    // Use mock location since geolocation requires HTTPS\n    const mockLocation = {\n      latitude: 33.5731 + (Math.random() - 0.5) * 0.01,\n      longitude: -7.5898 + (Math.random() - 0.5) * 0.01\n    };\n    \n    console.log('Using mock location for testing:', mockLocation);\n    return Promise.resolve(mockLocation);\n  }\n}\n\nexport default LocationTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}